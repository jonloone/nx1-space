# Production Dockerfile for Ground Station Intelligence
# Multi-stage build with security hardening

# Build stage
FROM node:18.19.1-alpine3.19 AS builder

# Install security updates and build tools
RUN apk update && apk upgrade && \
    apk add --no-cache git python3 make g++ && \
    rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Create non-root user for build
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -u 1001 -G appgroup

# Copy package files
COPY package.prod.json package.json
COPY yarn.lock* package-lock.json* ./

# Install dependencies with security audit
RUN npm ci --only=production --no-audit --no-fund && \
    npm audit --audit-level high && \
    npm cache clean --force

# Copy source code
COPY --chown=appuser:appgroup . .

# Run security scan
RUN npm run security-audit || true

# Build application
RUN npm run build

# Production stage with security hardening
FROM nginx:1.25.4-alpine3.18

# Install security updates and runtime tools
RUN apk update && apk upgrade && \
    apk add --no-cache \
    tini \
    curl \
    ca-certificates \
    tzdata && \
    rm -rf /var/cache/apk/* && \
    # Remove default nginx content
    rm -rf /usr/share/nginx/html/*

# Create application user
RUN addgroup -g 101 -S app && \
    adduser -S app -u 101 -G app

# Copy built application
COPY --from=builder --chown=app:app /app/build /usr/share/nginx/html

# Copy production nginx configuration
COPY --chown=app:app nginx.prod.conf /etc/nginx/conf.d/default.conf

# Copy application data
COPY --chown=app:app kepler_ground_stations.json /usr/share/nginx/html/data/

# Create required directories with proper permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run && \
    chown -R app:app /var/cache/nginx /var/log/nginx /var/run /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html && \
    # Create nginx PID directory
    mkdir -p /run/nginx && \
    chown app:app /run/nginx

# Copy nginx configuration for non-root
COPY --chown=app:app nginx-nonroot.conf /etc/nginx/nginx.conf

# Health check with proper timeout
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Switch to non-root user
USER app

# Expose non-privileged port
EXPOSE 8080

# Use tini as init system for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start nginx
CMD ["nginx", "-g", "daemon off;"]