'use client';

import React, { useState, useCallback, useMemo } from 'react';
import { X, Mountain, Camera, Download, RotateCcw, ZoomIn, ZoomOut, Maximize2 } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Slider } from '@/components/ui/slider';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Map from 'react-map-gl/maplibre';
import { DeckGL } from '@deck.gl/react';
import { TerrainLayer } from '@deck.gl/geo-layers';
import { ScatterplotLayer } from '@deck.gl/layers';
import { MapViewState } from 'react-map-gl';
import { PrecomputedStationScore } from '@/lib/data/precomputed-opportunity-scores';

// Mapbox terrain style
const TERRAIN_STYLE = 'https://basemaps.cartocdn.com/gl/positron-gl-style/style.json';

interface TerrainPortalProps {
  isOpen: boolean;
  onClose: () => void;
  selectedStation: {
    station: PrecomputedStationScore;
    coordinates: [number, number];
  } | null;
}

interface TerrainViewState extends MapViewState {
  pitch: number;
  bearing: number;
}

export function TerrainPortal({ isOpen, onClose, selectedStation }: TerrainPortalProps) {
  const [viewState, setViewState] = useState<TerrainViewState>({
    longitude: selectedStation?.coordinates[1] || -122.4,
    latitude: selectedStation?.coordinates[0] || 37.7,
    zoom: 12,
    pitch: 60,
    bearing: 0
  });

  const [terrainExaggeration, setTerrainExaggeration] = useState([2]);
  const [showViewshed, setShowViewshed] = useState(true);
  const [activeTab, setActiveTab] = useState('3d');

  // Update view state when selectedStation changes
  React.useEffect(() => {
    if (selectedStation) {
      setViewState(prev => ({
        ...prev,
        longitude: selectedStation.coordinates[1],
        latitude: selectedStation.coordinates[0],
        zoom: 12,
        pitch: 60,
        bearing: 0
      }));
    }
  }, [selectedStation]);

  // Generate terrain data points around the station
  const terrainData = useMemo(() => {
    if (!selectedStation) return [];

    const station = selectedStation.station;
    const [lat, lng] = selectedStation.coordinates;
    
    // Generate a grid of points around the station for terrain visualization
    const gridPoints = [];
    const gridSize = 20;
    const gridSpacing = 0.01; // Roughly 1km at equator
    
    for (let i = -gridSize; i <= gridSize; i++) {
      for (let j = -gridSize; j <= gridSize; j++) {
        const pointLat = lat + i * gridSpacing;
        const pointLng = lng + j * gridSpacing;
        const distance = Math.sqrt(i * i + j * j) * gridSpacing * 111; // Convert to km
        
        // Simulate terrain elevation (replace with real DEM data)
        const elevation = Math.max(0, 
          100 + Math.sin(i * 0.3) * 50 + Math.cos(j * 0.3) * 30 + 
          Math.random() * 20 - 10
        );
        
        // Calculate line-of-sight score (simplified)
        let losScore = 1.0;
        if (distance > 0) {
          losScore = Math.max(0.1, 1.0 - (distance / 100)); // Decrease with distance
          
          // Penalize if terrain is too high
          if (elevation > 200) {
            losScore *= 0.5;
          }
        }
        
        gridPoints.push({
          position: [pointLng, pointLat, elevation],
          elevation: elevation,
          losScore: losScore,
          distance: distance
        });
      }
    }
    
    return gridPoints;
  }, [selectedStation]);

  // Station marker data
  const stationMarker = useMemo(() => {
    if (!selectedStation) return [];
    
    return [{
      position: [selectedStation.coordinates[1], selectedStation.coordinates[0], 50],
      color: [220, 38, 127, 255], // Bright pink
      radius: 100,
      name: selectedStation.station.name
    }];
  }, [selectedStation]);

  // Create deck.gl layers
  const layers = useMemo(() => {
    const layerList = [];

    // Terrain layer (simplified - would use real DEM tiles in production)
    if (terrainData.length > 0) {
      layerList.push(
        new ScatterplotLayer({
          id: 'terrain-points',
          data: terrainData,
          getPosition: (d: any) => d.position,
          getRadius: 50,
          getFillColor: (d: any) => {
            // Color by elevation
            const elevationNorm = Math.min(1, d.elevation / 300);
            return [
              50 + elevationNorm * 100,
              100 + elevationNorm * 100,
              50 + elevationNorm * 50,
              120
            ];
          },
          pickable: false
        })
      );
    }

    // Viewshed analysis layer
    if (showViewshed && terrainData.length > 0) {
      layerList.push(
        new ScatterplotLayer({
          id: 'viewshed-analysis',
          data: terrainData,
          getPosition: (d: any) => d.position,
          getRadius: 30,
          getFillColor: (d: any) => {
            // Color by line-of-sight score
            if (d.losScore > 0.8) return [34, 197, 94, 150];   // Green - excellent LOS
            if (d.losScore > 0.6) return [251, 191, 36, 150];  // Yellow - good LOS
            if (d.losScore > 0.4) return [251, 146, 60, 150];  // Orange - moderate LOS
            return [239, 68, 68, 150];                         // Red - poor LOS
          },
          pickable: true,
          onHover: (info: any) => {
            if (info.picked && info.object) {
              // Could show tooltip with LOS details
            }
          }
        })
      );
    }

    // Station marker
    layerList.push(
      new ScatterplotLayer({
        id: 'station-marker-3d',
        data: stationMarker,
        getPosition: (d: any) => d.position,
        getRadius: (d: any) => d.radius,
        getFillColor: (d: any) => d.color,
        getLineColor: [255, 255, 255],
        getLineWidth: 3,
        stroked: true,
        filled: true,
        radiusMinPixels: 8,
        radiusMaxPixels: 20,
        pickable: true
      })
    );

    return layerList;
  }, [terrainData, stationMarker, showViewshed]);

  // Control handlers
  const handleResetView = useCallback(() => {
    if (selectedStation) {
      setViewState({
        longitude: selectedStation.coordinates[1],
        latitude: selectedStation.coordinates[0],
        zoom: 12,
        pitch: 60,
        bearing: 0
      });
    }
  }, [selectedStation]);

  const handleZoomIn = useCallback(() => {
    setViewState(prev => ({ ...prev, zoom: Math.min(20, prev.zoom + 1) }));
  }, []);

  const handleZoomOut = useCallback(() => {
    setViewState(prev => ({ ...prev, zoom: Math.max(1, prev.zoom - 1) }));
  }, []);

  const handleExport = useCallback(() => {
    // Implement terrain analysis export
    console.log('Exporting terrain analysis for:', selectedStation?.station.name);
  }, [selectedStation]);

  if (!selectedStation) return null;

  const station = selectedStation.station;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl w-full h-[90vh] bg-gray-900 border-gray-700 text-white">
        <DialogHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Mountain className="text-purple-400" size={20} />
              <DialogTitle className="text-xl text-white">
                3D Terrain Analysis - {station.name}
              </DialogTitle>
            </div>
            <div className="flex items-center space-x-2">
              <Badge variant="outline" className="text-xs">
                {station.country}
              </Badge>
              <Button variant="ghost" size="sm" onClick={onClose}>
                <X size={16} />
              </Button>
            </div>
          </div>
        </DialogHeader>

        <div className="flex-1 flex gap-4">
          {/* Main 3D View */}
          <div className="flex-1 relative">
            <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full">
              <TabsList className="absolute top-2 left-2 z-10 bg-gray-800">
                <TabsTrigger value="3d">3D View</TabsTrigger>
                <TabsTrigger value="satellite">Satellite</TabsTrigger>
                <TabsTrigger value="analysis">Analysis</TabsTrigger>
              </TabsList>

              <TabsContent value="3d" className="h-full">
                <div className="h-full rounded-lg overflow-hidden bg-gray-800">
                  <DeckGL
                    viewState={viewState}
                    onViewStateChange={({ viewState }) => setViewState(viewState)}
                    controller={{
                      touchRotate: true,
                      dragRotate: true
                    }}
                    layers={layers}
                    style={{ width: '100%', height: '100%' }}
                  >
                    <Map
                      mapStyle={TERRAIN_STYLE}
                      attributionControl={false}
                    />
                  </DeckGL>
                  
                  {/* 3D Controls */}
                  <div className="absolute bottom-4 left-4 flex flex-col space-y-2">
                    <Button variant="outline" size="sm" onClick={handleZoomIn}>
                      <ZoomIn size={16} />
                    </Button>
                    <Button variant="outline" size="sm" onClick={handleZoomOut}>
                      <ZoomOut size={16} />
                    </Button>
                    <Button variant="outline" size="sm" onClick={handleResetView}>
                      <RotateCcw size={16} />
                    </Button>
                  </div>
                </div>
              </TabsContent>

              <TabsContent value="satellite" className="h-full">
                <div className="h-full rounded-lg overflow-hidden bg-gray-800">
                  <DeckGL
                    viewState={{ ...viewState, pitch: 0 }}
                    onViewStateChange={({ viewState }) => setViewState({ ...viewState, pitch: 60 })}
                    controller={{
                      touchRotate: false,
                      dragRotate: false
                    }}
                    layers={layers.filter(l => l.id !== 'terrain-points')}
                    style={{ width: '100%', height: '100%' }}
                  >
                    <Map
                      mapStyle="https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json"
                      attributionControl={false}
                    />
                  </DeckGL>
                </div>
              </TabsContent>

              <TabsContent value="analysis" className="h-full p-4 bg-gray-800 rounded-lg">
                <div className="space-y-4">
                  <Card className="bg-gray-700 border-gray-600">
                    <CardHeader>
                      <CardTitle className="text-sm text-white">Line-of-Sight Analysis</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-300">Elevation</span>
                          <span className="text-white">~150m ASL</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-300">Horizon Range</span>
                          <span className="text-white">43.5 km</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-300">Clear LOS Coverage</span>
                          <span className="text-green-400">85% within 50km</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-300">Terrain Obstructions</span>
                          <span className="text-orange-400">Minor hills NE</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="bg-gray-700 border-gray-600">
                    <CardHeader>
                      <CardTitle className="text-sm text-white">Interference Assessment</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-300">C/I Ratio</span>
                          <span className="text-white">{station.interferenceImpact.cToIRatio} dB</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-300">Service Quality</span>
                          <Badge variant="outline" className="text-xs">
                            {station.interferenceImpact.serviceQualityImpact}
                          </Badge>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-300">Primary Source</span>
                          <span className="text-gray-300 text-xs">
                            {station.interferenceImpact.dominantInterference}
                          </span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="bg-gray-700 border-gray-600">
                    <CardHeader>
                      <CardTitle className="text-sm text-white">Weather Impact</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-300">Rain Fade Risk</span>
                          <span className="text-yellow-400">Moderate</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-300">Snow Loading</span>
                          <span className="text-blue-400">Low</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-300">Wind Profile</span>
                          <span className="text-green-400">Favorable</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>
            </Tabs>
          </div>

          {/* Control Panel */}
          <div className="w-72 space-y-4">
            {/* Station Info */}
            <Card className="bg-gray-800 border-gray-600">
              <CardHeader>
                <CardTitle className="text-sm text-white flex items-center">
                  <Camera className="mr-2" size={16} />
                  View Controls
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label className="text-sm text-gray-300">
                    Terrain Exaggeration: {terrainExaggeration[0]}x
                  </Label>
                  <Slider
                    value={terrainExaggeration}
                    onValueChange={setTerrainExaggeration}
                    max={10}
                    min={1}
                    step={0.5}
                    className="mt-2"
                  />
                </div>

                <div className="space-y-2">
                  <Button
                    variant={showViewshed ? "default" : "outline"}
                    size="sm"
                    onClick={() => setShowViewshed(!showViewshed)}
                    className="w-full justify-start"
                  >
                    Show Viewshed Analysis
                  </Button>
                </div>

                <div className="pt-2 border-t border-gray-600">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleExport}
                    className="w-full justify-start"
                  >
                    <Download size={14} className="mr-2" />
                    Export Analysis
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Station Details */}
            <Card className="bg-gray-800 border-gray-600">
              <CardHeader>
                <CardTitle className="text-sm text-white">Station Details</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-300">Operator</span>
                  <span className="text-white">{station.operator}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">Type</span>
                  <span className="text-white">{station.type}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">Coordinates</span>
                  <span className="text-gray-400 text-xs">
                    {selectedStation.coordinates[0].toFixed(4)}, {selectedStation.coordinates[1].toFixed(4)}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">Capacity</span>
                  <span className="text-blue-400">{station.capacityGbps} Gbps</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">Utilization</span>
                  <span className="text-green-400">{station.actualUtilization}%</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">Overall Score</span>
                  <span className="text-purple-400">{station.overallScore}/100</span>
                </div>
              </CardContent>
            </Card>

            {/* Legend */}
            <Card className="bg-gray-800 border-gray-600">
              <CardHeader>
                <CardTitle className="text-sm text-white">Legend</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2 text-xs">
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                    <span className="text-gray-300">Excellent LOS</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                    <span className="text-gray-300">Good LOS</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-orange-500 rounded-full"></div>
                    <span className="text-gray-300">Moderate LOS</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                    <span className="text-gray-300">Poor LOS</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-pink-600 rounded-full"></div>
                    <span className="text-gray-300">Station Location</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}